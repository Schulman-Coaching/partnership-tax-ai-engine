name: Documentation & Changelog

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog
        uses: conventional-changelog/standard-version@v9
        with:
          tag-prefix: v
          release-as: minor

      - name: Create Pull Request for Changelog
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update changelog and version'
          title: 'Update Changelog and Version'
          body: |
            ## Automated Changelog Update
            
            This PR updates the changelog with recent changes and bumps the version.
            
            **Auto-generated by GitHub Actions** ðŸ¤–
          branch: update-changelog
          delete-branch: true

  api-documentation:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Generate OpenAPI spec
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        run: |
          cd backend
          python -c "
          from app.main import app
          import json
          
          # Generate OpenAPI spec
          openapi_spec = app.openapi()
          
          # Save to file
          with open('openapi.json', 'w') as f:
              json.dump(openapi_spec, f, indent=2)
          
          print('OpenAPI specification generated successfully')
          "

      - name: Generate API documentation
        uses: redocly/cli-action@v0.10.2
        with:
          args: build-docs backend/openapi.json --output=docs/api.html

      - name: Upload API documentation
        uses: actions/upload-artifact@v3
        with:
          name: api-documentation
          path: docs/api.html

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [api-documentation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download API documentation
        uses: actions/download-artifact@v3
        with:
          name: api-documentation
          path: docs/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create documentation site
        run: |
          mkdir -p docs-site
          cd docs-site
          
          # Initialize package.json
          npm init -y
          npm install --save-dev @docusaurus/core @docusaurus/preset-classic
          
          # Create basic Docusaurus config
          cat > docusaurus.config.js << 'EOF'
          module.exports = {
            title: 'Partnership Tax AI Engine',
            tagline: 'API Documentation and Developer Guide',
            url: 'https://partnership-tax-engine.github.io',
            baseUrl: '/',
            onBrokenLinks: 'throw',
            onBrokenMarkdownLinks: 'warn',
            favicon: 'img/favicon.ico',
            organizationName: 'partnership-tax-engine',
            projectName: 'partnership-tax-ai-engine',
            themeConfig: {
              navbar: {
                title: 'Partnership Tax AI Engine',
                items: [
                  {
                    type: 'doc',
                    docId: 'intro',
                    position: 'left',
                    label: 'Docs',
                  },
                  {
                    href: '/api.html',
                    label: 'API Reference',
                    position: 'left',
                  },
                ],
              },
            },
            presets: [
              [
                '@docusaurus/preset-classic',
                {
                  docs: {
                    sidebarPath: require.resolve('./sidebars.js'),
                  },
                },
              ],
            ],
          };
          EOF
          
          # Create basic sidebar
          echo "module.exports = { tutorialSidebar: [{ type: 'autogenerated', dirName: '.' }] };" > sidebars.js
          
          # Create docs directory
          mkdir -p docs src/pages
          
          # Copy API docs
          cp ../docs/api.html static/
          
          # Create intro doc
          cat > docs/intro.md << 'EOF'
          ---
          sidebar_position: 1
          ---
          
          # Introduction
          
          Welcome to the Partnership Tax AI Engine documentation.
          
          This system provides intelligent tax calculation and compliance features for partnership entities.
          
          ## Features
          
          - AI-powered tax calculations
          - Document processing and analysis
          - Compliance reporting
          - Real-time tax optimization recommendations
          
          ## Getting Started
          
          Check out the [API Reference](/api.html) for detailed endpoint documentation.
          EOF

      - name: Build documentation site
        run: |
          cd docs-site
          npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs-site/build

  validate-commit-messages:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: '.github/commitlint.config.js'

  pr-labeler:
    name: Auto-label Pull Requests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Label PR based on changes
        uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: '.github/labeler.yml'