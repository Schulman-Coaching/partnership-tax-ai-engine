name: Performance Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install locust pytest-benchmark

      - name: Create test database
        run: |
          PGPASSWORD=test_password psql -h localhost -U postgres -d test_db -c "CREATE ROLE root WITH LOGIN SUPERUSER PASSWORD 'test_password';" || true

      - name: Start backend server
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run load tests with Locust
        run: |
          cd backend
          cat > locustfile.py << 'EOF'
          from locust import HttpUser, task, between
          
          class PartnershipTaxUser(HttpUser):
              wait_time = between(1, 3)
              
              def on_start(self):
                  # Health check
                  self.client.get("/health")
              
              @task(3)
              def health_check(self):
                  self.client.get("/health")
              
              @task(1)
              def get_partnerships(self):
                  self.client.get("/api/v1/partnerships")
              
              @task(1)
              def get_tax_calculations(self):
                  self.client.get("/api/v1/tax-calculations")
          EOF
          
          locust -f locustfile.py --headless --users 50 --spawn-rate 5 --run-time 2m --host http://localhost:8000 --html load_test_report.html

      - name: Run performance benchmarks
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend
          pytest tests/ -k "benchmark" --benchmark-json=benchmark_results.json || echo "No benchmark tests found"

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            backend/load_test_report.html
            backend/benchmark_results.json

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Start frontend server
        run: |
          cd frontend
          npm start &
          sleep 30

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.github/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Analyze bundle size
        run: |
          cd frontend
          npm install --save-dev webpack-bundle-analyzer
          npm run build
          npx webpack-bundle-analyzer .next/static/chunks/*.js --report --mode static --report bundle-report.html

      - name: Check bundle size limits
        run: |
          cd frontend
          cat > check-bundle-size.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const MAX_BUNDLE_SIZE = 500 * 1024; // 500KB
          const buildDir = '.next/static/chunks';
          
          if (!fs.existsSync(buildDir)) {
            console.log('No build directory found');
            process.exit(0);
          }
          
          const files = fs.readdirSync(buildDir)
            .filter(file => file.endsWith('.js'))
            .map(file => ({
              name: file,
              size: fs.statSync(path.join(buildDir, file)).size
            }));
          
          let hasLargeFiles = false;
          
          files.forEach(file => {
            if (file.size > MAX_BUNDLE_SIZE) {
              console.error(`❌ ${file.name}: ${(file.size / 1024).toFixed(2)}KB (exceeds ${MAX_BUNDLE_SIZE / 1024}KB limit)`);
              hasLargeFiles = true;
            } else {
              console.log(`✅ ${file.name}: ${(file.size / 1024).toFixed(2)}KB`);
            }
          });
          
          if (hasLargeFiles) {
            process.exit(1);
          }
          EOF
          
          node check-bundle-size.js

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: frontend/bundle-report.html